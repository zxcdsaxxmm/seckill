
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
        #统一在http域中进行配置
        #限制请求
        limit_req_zone $binary_remote_addr $uri zone=api_read:20m rate=50r/s;
        #按ip配置一个连接 zone
        limit_conn_zone $binary_remote_addr zone=perip_conn:10m;
        #按server配置一个连接 zone
        limit_conn_zone $server_name zone=perserver_conn:100m;
        server {
                listen       80;
                server_name  localhost;
                index order.html;
                location / {
                      #请求限流排队通过 burst默认是0
                      limit_req zone=api_read burst=5;
                      #连接数限制,每个IP并发请求为2
                      limit_conn perip_conn 2;
                      #服务所限制的连接数(即限制了该server并发连接数量)
                      limit_conn perserver_conn 1000;
                      #连接限速
                      limit_rate 100k;
                      proxy_pass      http://seckill;
                }

        location / {
            root   html;
            index  index.html index.htm;
        }

		location / {
			root html/protal;
			index  order.html;
		}
        }
        #upstream seckill {
        #        fair;
        #        server  172.16.1.120:8080 weight=1  max_fails=2 fail_timeout=30s;
        #        server  172.16.1.130:8080 weight=1  max_fails=2 fail_timeout=30s;
       # }
   # server {
      #  listen       80;
      #  server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        #负载均衡（轮询策略）
		#upstream backserver{
		 #   server 192.168.1.14 weight=1 max_fails = 2 fail_timeout=30s;
		#}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
